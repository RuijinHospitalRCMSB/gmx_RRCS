{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to GMX_RRCS \u00b6 The gmx_rrcs script is designed to calculate the residues-residues contact scores (rrcs) from a trajectory file generated by GROMACS. Install \u00b6 To install GMX_RRCS, simply run: pip install gmx-rrcs Requires Python version >= 3.9. File Formats \u00b6 Topology and Trajectory Files \u00b6 We use the MDAnalysis library to read and process GROMACS trajectories. Therefore, the --top_file and --traj_file parameters accept file formats supported by MDAnalysis . Ensure that your input files conform to MDAnalysis format requirements. In our tests, there have been occasional issues with reading .tpr files, so we recommend using .pdb or .gro files as the input topology files for the --top_file parameter. For trajectory files, we recommend using the .xtc format. It is crucial to check the completeness and correctness of your protein and trajectory in the input files before running gmx_rrcs to ensure accurate results. Residue Pair Indices File \u00b6 This file format is custom-defined. Each line specifies a pair of residue indices separated by the $ symbol, where the content before $ is the first member, and the content after $ is the second member. A simple example is as follows: 15 $ 28 ; This line defines a residue pair (15, 28), where the first member is residue 15 and the second member is residue 28. The content after the ; character is considered a comment and will be ignored during parsing. Multiple residue pairs can be specified on the same line by separating them with spaces: 15 16 $ 28 ; This line defines two residue pairs: (15, 28) and (16, 28). Similrly, multiple residues can be specified for the second member: 15 $ 28 29 ; This line defines residue pairs (15, 28) and (15, 29). Both members can specify multiple residues: 15 16 $ 28 29 ; This line defines residue pairs (15, 28), (15, 29), (16, 28), and (16, 29). You can also specify a range of residues using the - symbol: 15-17 20 $ 28 ; This line defines residue pairs (15, 28), (16, 28), (17, 28), and (20, 28). If a line does not contain the $ symbol, the residues on that line will pair with each other: 15 28 40 ; This line defines residue pairs (15, 28), (15, 40), and (28, 40). The residue pair indices file allows multiple lines to define residue pairs: 15 $ 28 32 35 $ 10 46 $ 55 16 78 58 $ 98 61 99-102 $ 293-299 Regardless of the number of lines, they will all be merged into a single list of residue pairs. For GMX_RRCS, the residue pair indices file is not a required parameter. If you do not provide this file, GMX_RRCS will automatically generate a list of all possible residue pairs in the protein, which will significantly increase computation time. Hence, it is generally not recommended.","title":"Home"},{"location":"#welcome-to-gmx_rrcs","text":"The gmx_rrcs script is designed to calculate the residues-residues contact scores (rrcs) from a trajectory file generated by GROMACS.","title":"Welcome to GMX_RRCS"},{"location":"#install","text":"To install GMX_RRCS, simply run: pip install gmx-rrcs Requires Python version >= 3.9.","title":"Install"},{"location":"#file-formats","text":"","title":"File Formats"},{"location":"#topology-and-trajectory-files","text":"We use the MDAnalysis library to read and process GROMACS trajectories. Therefore, the --top_file and --traj_file parameters accept file formats supported by MDAnalysis . Ensure that your input files conform to MDAnalysis format requirements. In our tests, there have been occasional issues with reading .tpr files, so we recommend using .pdb or .gro files as the input topology files for the --top_file parameter. For trajectory files, we recommend using the .xtc format. It is crucial to check the completeness and correctness of your protein and trajectory in the input files before running gmx_rrcs to ensure accurate results.","title":"Topology and Trajectory Files"},{"location":"#residue-pair-indices-file","text":"This file format is custom-defined. Each line specifies a pair of residue indices separated by the $ symbol, where the content before $ is the first member, and the content after $ is the second member. A simple example is as follows: 15 $ 28 ; This line defines a residue pair (15, 28), where the first member is residue 15 and the second member is residue 28. The content after the ; character is considered a comment and will be ignored during parsing. Multiple residue pairs can be specified on the same line by separating them with spaces: 15 16 $ 28 ; This line defines two residue pairs: (15, 28) and (16, 28). Similrly, multiple residues can be specified for the second member: 15 $ 28 29 ; This line defines residue pairs (15, 28) and (15, 29). Both members can specify multiple residues: 15 16 $ 28 29 ; This line defines residue pairs (15, 28), (15, 29), (16, 28), and (16, 29). You can also specify a range of residues using the - symbol: 15-17 20 $ 28 ; This line defines residue pairs (15, 28), (16, 28), (17, 28), and (20, 28). If a line does not contain the $ symbol, the residues on that line will pair with each other: 15 28 40 ; This line defines residue pairs (15, 28), (15, 40), and (28, 40). The residue pair indices file allows multiple lines to define residue pairs: 15 $ 28 32 35 $ 10 46 $ 55 16 78 58 $ 98 61 99-102 $ 293-299 Regardless of the number of lines, they will all be merged into a single list of residue pairs. For GMX_RRCS, the residue pair indices file is not a required parameter. If you do not provide this file, GMX_RRCS will automatically generate a list of all possible residue pairs in the protein, which will significantly increase computation time. Hence, it is generally not recommended.","title":"Residue Pair Indices File"},{"location":"Tutorials/","text":"Tutorial 1: Residue contact analysis of lysozyme MD analysis \u00b6 Prepare \u00b6 This tutorial will use the classic GROMACs simulation case to guide users how to use GMX_RRCS to complete step by step contact analysis between residues in the molecular dynamics simulation trajectory. To make the results more analytical, we adjusted the total duration of the simulation to 300ns. After the simulation, you will get an xtc file, which contains a series of dynamic structures for the simulation time you specify. The following code can be used to obtain a trace file of xtc type with an interval of 0.1ns, 300ns, and containing only Protein. gmx trjconv -f md_0_1.xtc -s md_0_1.tpr -fit rot+trans -center -dt 100 -e 300000 -o md_0_1-dt0.1ns-protein-center.xtc Calculate RRCS \u00b6 After determining the successful installation of GMX_RRCS, we first calculate the mutual contact score between residues, the RRCS between residues is defined as: You can do this in two ways. CLI \u00b6 gmx_rrcs --top_file Snapshot-0ns.pdb --traj_file md_300ns-dt0.1ns-protein-center.xtc --res_file residue.txt --output_file output_rrcs_intraprotein --output_file output_rrcs_intraprotein --save_hdf5 Because the simulation trajectory is short and the protein residue base is small, we can select all residues for analysis by default. The run should complete in 5 minutes. You will get a new folder named output_rrcs_intraprotein \uff0cand the internal structure is as follows\uff1a Tool function \u00b6 Tool function calls, just need to run the above code in your notebook or python script import gmx_rrcs as gr topology = r\"Snapshot-0ns.pdb\" trajectory = r\"md_300ns-dt0.1ns-protein-center.xtc\" output_dir = \"output_rrcs_lysozyme\" selection = \"protein\" r_min = 3.23 r_max = 4.63 cutoff = 10.0 dt = 100.0 bt = 0.0 et = 300000.0 gr.compute_intraprotein_rrcs( topology_file=topology, trajectory_file=trajectory, selection=selection, output_dir=output_dir, r_min=r_min, r_max=r_max, cutoff=cutoff, dt=dt, bt=bt, et=et, write_xvg=True ) output_rrcs_lysozyme \uff1a \u200b rrcs_results_intraprotein.h5 \uff1aStores RRCS data for all residue pairs on each frame\uff1b \u200b xvg file stores residue-to-RRCs data over time, and users can use other plotting tools such as Xmgrace and gnuplot to draw other images as needed. \\output_rrcs_lysozyme 1&39.xvg 1&40.xvg ... 128&129.xvg rrcs_results_intraprotein.h5 Plot \u00b6 Bar chart + error bar + Scatter chart \u00b6 Select the residue number that you are interested in, such as the residue number 123W that we are concerned about, and use the following code to draw the Bar diagram of the residue: pdb_file = r\"D:\\Round2\\Bilis\\new\\300ns-MDsimulation\\Snapshot-0ns.pdb\" h5_file = r\"D:\\Round2\\Bilis\\new\\300ns-MDsimulation\\output_intra_rrcs\\rrcs_results_intraprotein.h5\" bt = 0.0 # 0 ns et = 300000.0 # 300 ns mean_rrcs_cutoff = 0.8 resid = 123 out_bar_figure = \"Filtered_bar_single_protein.eps\" gr.plot_intraprotein_rrcs_bar_scatter( pdb_file=pdb_file, h5_file=h5_file, bt=bt, et=et, mean_rrcs_cutoff=mean_rrcs_cutoff, resid=resid, output_figure=out_bar_figure, y_max=25.0 ) You will find the generated image Filtered_bar_single_protein.eps in the current directory. Density stack diagram \u00b6 This method can see the specific dynamic changes over time, there are two modes, when you only focus on a residue, you can use the following code: out_density_figure = \"Filtered_density_toge_single_protein.png\" gr.plot_intraprotein_rrcs_stacked_area( pdb_file=pdb_file, h5_file=h5_file, bt=bt, et=et, mean_rrcs_cutoff=0.8, resid=resid, output_figure=out_density_figure )","title":"Getting Started"},{"location":"Tutorials/#tutorial-1-residue-contact-analysis-of-lysozyme-md-analysis","text":"","title":"Tutorial 1: Residue contact analysis of lysozyme MD analysis"},{"location":"Tutorials/#prepare","text":"This tutorial will use the classic GROMACs simulation case to guide users how to use GMX_RRCS to complete step by step contact analysis between residues in the molecular dynamics simulation trajectory. To make the results more analytical, we adjusted the total duration of the simulation to 300ns. After the simulation, you will get an xtc file, which contains a series of dynamic structures for the simulation time you specify. The following code can be used to obtain a trace file of xtc type with an interval of 0.1ns, 300ns, and containing only Protein. gmx trjconv -f md_0_1.xtc -s md_0_1.tpr -fit rot+trans -center -dt 100 -e 300000 -o md_0_1-dt0.1ns-protein-center.xtc","title":"Prepare"},{"location":"Tutorials/#calculate-rrcs","text":"After determining the successful installation of GMX_RRCS, we first calculate the mutual contact score between residues, the RRCS between residues is defined as: You can do this in two ways.","title":"Calculate RRCS"},{"location":"Tutorials/#cli","text":"gmx_rrcs --top_file Snapshot-0ns.pdb --traj_file md_300ns-dt0.1ns-protein-center.xtc --res_file residue.txt --output_file output_rrcs_intraprotein --output_file output_rrcs_intraprotein --save_hdf5 Because the simulation trajectory is short and the protein residue base is small, we can select all residues for analysis by default. The run should complete in 5 minutes. You will get a new folder named output_rrcs_intraprotein \uff0cand the internal structure is as follows\uff1a","title":"CLI"},{"location":"Tutorials/#tool-function","text":"Tool function calls, just need to run the above code in your notebook or python script import gmx_rrcs as gr topology = r\"Snapshot-0ns.pdb\" trajectory = r\"md_300ns-dt0.1ns-protein-center.xtc\" output_dir = \"output_rrcs_lysozyme\" selection = \"protein\" r_min = 3.23 r_max = 4.63 cutoff = 10.0 dt = 100.0 bt = 0.0 et = 300000.0 gr.compute_intraprotein_rrcs( topology_file=topology, trajectory_file=trajectory, selection=selection, output_dir=output_dir, r_min=r_min, r_max=r_max, cutoff=cutoff, dt=dt, bt=bt, et=et, write_xvg=True ) output_rrcs_lysozyme \uff1a \u200b rrcs_results_intraprotein.h5 \uff1aStores RRCS data for all residue pairs on each frame\uff1b \u200b xvg file stores residue-to-RRCs data over time, and users can use other plotting tools such as Xmgrace and gnuplot to draw other images as needed. \\output_rrcs_lysozyme 1&39.xvg 1&40.xvg ... 128&129.xvg rrcs_results_intraprotein.h5","title":"Tool function"},{"location":"Tutorials/#plot","text":"","title":"Plot"},{"location":"Tutorials/#bar-chart-error-bar-scatter-chart","text":"Select the residue number that you are interested in, such as the residue number 123W that we are concerned about, and use the following code to draw the Bar diagram of the residue: pdb_file = r\"D:\\Round2\\Bilis\\new\\300ns-MDsimulation\\Snapshot-0ns.pdb\" h5_file = r\"D:\\Round2\\Bilis\\new\\300ns-MDsimulation\\output_intra_rrcs\\rrcs_results_intraprotein.h5\" bt = 0.0 # 0 ns et = 300000.0 # 300 ns mean_rrcs_cutoff = 0.8 resid = 123 out_bar_figure = \"Filtered_bar_single_protein.eps\" gr.plot_intraprotein_rrcs_bar_scatter( pdb_file=pdb_file, h5_file=h5_file, bt=bt, et=et, mean_rrcs_cutoff=mean_rrcs_cutoff, resid=resid, output_figure=out_bar_figure, y_max=25.0 ) You will find the generated image Filtered_bar_single_protein.eps in the current directory.","title":"Bar chart + error bar + Scatter chart"},{"location":"Tutorials/#density-stack-diagram","text":"This method can see the specific dynamic changes over time, there are two modes, when you only focus on a residue, you can use the following code: out_density_figure = \"Filtered_density_toge_single_protein.png\" gr.plot_intraprotein_rrcs_stacked_area( pdb_file=pdb_file, h5_file=h5_file, bt=bt, et=et, mean_rrcs_cutoff=0.8, resid=resid, output_figure=out_density_figure )","title":"Density stack diagram"}]}